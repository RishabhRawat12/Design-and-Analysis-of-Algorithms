#include <stdio.h>

void merge(int arr[], int temp[], int left, int mid, int right, int *comparisons, int *inversions) {
    int i = left, j = mid + 1, k = left;
    while (i <= mid && j <= right) {
        (*comparisons)++;
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            (*inversions) += (mid - i + 1);
        }
    }
    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];
    for (int i = left; i <= right; i++)
        arr[i] = temp[i];
}

void mergeSort(int arr[], int temp[], int left, int right, int *comparisons, int *inversions) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, temp, left, mid, comparisons, inversions);
        mergeSort(arr, temp, mid + 1, right, comparisons, inversions);
        merge(arr, temp, left, mid, right, comparisons, inversions);
    }
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        int n, comparisons = 0, inversions = 0;
        scanf("%d", &n);
        int arr[n], temp[n];
        for (int i = 0; i < n; i++)
            scanf("%d", &arr[i]);
        mergeSort(arr, temp, 0, n - 1, &comparisons, &inversions);
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n%d\n%d\n", comparisons, inversions);
    }
    return 0;
}
