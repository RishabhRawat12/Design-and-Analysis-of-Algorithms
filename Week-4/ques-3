#include <stdio.h>
#include <stdlib.h>

int partition(int arr[], int left, int right) {
    int pivot = arr[right];
    int i = left - 1;
    for (int j = left; j < right; j++) {
        if (arr[j] <= pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[right];
    arr[right] = temp;
    return i + 1;
}

int quickSelect(int arr[], int left, int right, int K) {
    if (left <= right) {
        int pi = partition(arr, left, right);
        if (pi == K)
            return arr[pi];
        else if (pi < K)
            return quickSelect(arr, pi + 1, right, K);
        else
            return quickSelect(arr, left, pi - 1, K);
    }
    return -1;
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        int n, K;
        scanf("%d", &n);
        int arr[n];
        for (int i = 0; i < n; i++)
            scanf("%d", &arr[i]);
        scanf("%d", &K);
        if (K < 1 || K > n) {
            printf("not present\n");
        } else {
            printf("%d\n", quickSelect(arr, 0, n - 1, K - 1));
        }
    }
    return 0;
}
